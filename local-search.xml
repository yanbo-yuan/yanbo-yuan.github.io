<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java_up</title>
    <link href="/2024/11/21/Java-up/"/>
    <url>/2024/11/21/Java-up/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-的内部类"><a href="#Java-的内部类" class="headerlink" title="Java 的内部类"></a>Java 的内部类</h1><h2 id="1-什么是内部类"><a href="#1-什么是内部类" class="headerlink" title="1.什么是内部类"></a>1.什么是内部类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">类的五大成员<br>    属性、方法、构造方法、代码块、内部类<br></code></pre></td></tr></table></figure><p>定义：在一个类的里面，再定义一个类。</p><p>举例：在A类的内部定义B类，B类就被称为内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;(外部类)<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;(内部类)<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;(外部其他类)<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../images/%E5%86%85%E9%83%A8%E7%B1%BB_1.png"></p><p><strong>什么时候用到内部类</strong>？</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">B</span>类表示的事务是<span class="hljs-selector-tag">A</span>类的一部分，且<span class="hljs-selector-tag">B</span>单独存在没有意义。<br>比如：汽车的发动机、ArrayList的迭代器、人的心脏。。。<br></code></pre></td></tr></table></figure><h2 id="2-内部类的分类"><a href="#2-内部类的分类" class="headerlink" title="2.内部类的分类"></a>2.内部类的分类</h2><ul><li><strong>成员内部类</strong></li></ul><p><img src="/../images/%E6%88%90%E5%91%98%E5%86%85%E9%83%A8%E7%B1%BB.png"></p><p><img src="/../images/%E6%88%90%E5%91%98%E5%86%85%E9%83%A8%E7%B1%BB_1.png"></p><p><img src="/../images/%E5%86%85%E9%83%A8%E7%B1%BB%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png"></p><ul><li>静态内部类(也是成员内部类的一种)</li></ul><p><strong>静态内部类只能访问外部类中的静态变量和静态方法</strong></p><p><em>如果想访问非静态的需要创建外部类的对象。</em></p><p><img src="/../images/%E5%86%85%E9%83%A8%E7%B1%BB_%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB2.png"></p><p><img src="/../images/%E5%86%85%E9%83%A8%E7%B1%BB_%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB.png"></p><p>总结：</p><p><img src="/../images/%E5%86%85%E9%83%A8%E7%B1%BB_%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB3.png"></p><ul><li>局部内部类(没什么用~~~可以略过)</li></ul><p>将内部类定义在方法里面就叫做局部内部类，<strong>类似于方法里面的局部变量</strong>。</p><ul><li><strong>匿名内部类</strong></li></ul><p><strong>匿名内部类的本质</strong>：隐藏了名字的内部类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">格式：<br><span class="hljs-keyword">new</span> 类名或者接口名()&#123;<br>    重写方法;<br>    &#125;<br><br>举例：<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inter</span>()&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>看看这个你就能理解匿名内部类的实现方法了</strong></p><p><img src="/../images/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB.png"></p><p><img src="/../images/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB2.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Android_development</title>
    <link href="/2024/11/21/Android-development/"/>
    <url>/2024/11/21/Android-development/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h1><h2 id="Fragment的使用"><a href="#Fragment的使用" class="headerlink" title="Fragment的使用"></a>Fragment的使用</h2><h3 id="1-fragment的产生"><a href="#1-fragment的产生" class="headerlink" title="1.fragment的产生"></a>1.fragment的产生</h3><p><img src="/../images/fragment.png"></p><h3 id="2-什么是fragment"><a href="#2-什么是fragment" class="headerlink" title="2.什么是fragment"></a>2.什么是fragment</h3><img src="../images/什么是fragment.png"  /><h3 id="3-fragment的简单使用1"><a href="#3-fragment的简单使用1" class="headerlink" title="3.fragment的简单使用1"></a>3.fragment的简单使用1</h3><h4 id="1-创建空白fragment"><a href="#1-创建空白fragment" class="headerlink" title="1.创建空白fragment"></a>1.创建空白fragment</h4><p><img src="/../images/fragment_1.png"></p><h4 id="2-fragment的生命周期函数"><a href="#2-fragment的生命周期函数" class="headerlink" title="2.fragment的生命周期函数"></a>2.fragment的生命周期函数</h4><p><img src="/../images/fragment_2.png"></p><h4 id="3-编写fragment里面的布局代码"><a href="#3-编写fragment里面的布局代码" class="headerlink" title="3.编写fragment里面的布局代码"></a>3.编写fragment里面的布局代码</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="/../images/fragment_3.png"></h4><h4 id="4-解析xml"><a href="#4-解析xml" class="headerlink" title="4.解析xml"></a>4.解析xml</h4><p><img src="/../images/fragment_4.png"></p><h4 id="5-书写对应的点击事件"><a href="#5-书写对应的点击事件" class="headerlink" title="5.书写对应的点击事件"></a>5.书写对应的点击事件</h4><p><img src="/../images/fragment_5.png"></p><h4 id="6-将这个fragment加入到activity中去-注意，一定要有id！"><a href="#6-将这个fragment加入到activity中去-注意，一定要有id！" class="headerlink" title="6.将这个fragment加入到activity中去(注意，一定要有id！)"></a>6.将这个fragment加入到activity中去(<em><strong>注意，一定要有id！</strong></em>)</h4><p><img src="/../images/fragment_6.png"></p><h4 id="7-效果展示"><a href="#7-效果展示" class="headerlink" title="7.效果展示"></a>7.效果展示</h4><p><img src="/../images/fragment_7.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PandaMusic</title>
    <link href="/2024/11/19/PandaMusic/"/>
    <url>/2024/11/19/PandaMusic/</url>
    
    <content type="html"><![CDATA[<h1 id="PandaMusic"><a href="#PandaMusic" class="headerlink" title="PandaMusic"></a>PandaMusic</h1><h1 id="今天开始，记录我的开发路程，加油！"><a href="#今天开始，记录我的开发路程，加油！" class="headerlink" title="今天开始，记录我的开发路程，加油！"></a>今天开始，记录我的开发路程，加油！</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python辅助教学</title>
    <link href="/2024/11/19/Python/"/>
    <url>/2024/11/19/Python/</url>
    
    <content type="html"><![CDATA[<h1 id="用python来辅助教学-图灵机实现"><a href="#用python来辅助教学-图灵机实现" class="headerlink" title="用python来辅助教学_图灵机实现"></a>用python来辅助教学_图灵机实现</h1><p>Python不仅可以帮助我们解决办公方面的问题，也能够用来制作动画，辅助教学。</p><p>计算机理论的相关内容一直困扰着计算机学生，因为抽象，难懂，如果能有一种直观的方式能够解释计算理论的内容，对学生的学习无疑是非常有帮助的。</p><p>想在请你来帮助他们，用的就是Python.</p><p>Manim是一个用汉语解释数学视频的动画引擎，由社区维护，它被用来以编程方式创建精准的动画。</p><p>现在，请你使用Manim来制定图灵机，根据一个图灵机的定义，能够自动生成一个图灵机识别一个字符串的动画。</p><p>关于图灵机的定义，可以使用文本文件形式来进行描述，文本的格式由你来定义。</p><p>​项目分析：</p><p>1.图灵机的定义：图灵机的工作原理：它是一个无限长的纸带（可读写）、一个读写头、以及一个有限的状态机组成。</p><p>图灵机根据当前状态和当前带上的符号，执行操作并转移到新的状态。你需要根据图灵机的定义生成动画，并展示图灵机如何识别一个输入字符串。</p><p>2.<strong>Manim</strong>： Manim 是一个强大的 Python 库，主要用于制作数学和算法相关的动画。Manim 可以帮助你动态展示算法的执行过程，尤其适合教学目的。</p><p>任务步骤：</p><p>1.<strong>图灵机的文本文件定义格式</strong>：你需要设计一个合适的格式来描述图灵机的工作规则。一个典型的图灵机规则可能包括：</p><ul><li><strong>状态集合</strong>：例如 <code>q0, q1, q_accept, q_reject</code></li><li><strong>字母集</strong>：例如 <code>&#123;0, 1, _&#125;</code>，其中 <code>_</code> 表示空白符</li><li><strong>转移函数</strong>：例如 <code>(q0, 1) -&gt; (q1, 1, R)</code>，表示在状态 <code>q0</code> 下遇到 <code>1</code> 时，转到 <code>q1</code>，写 <code>1</code> 并向右移动。</li><li><strong>起始状态</strong>、<strong>接受状态</strong>、<strong>拒绝状态</strong>。</li></ul><p>2.<strong>生成图灵机动画</strong>：</p><ul><li>使用 Manim 生成带有图灵机的图带和读写头。</li><li>动画展示图灵机根据当前状态、带上的符号如何执行动作（如读取、写入、移动）并转移状态。</li><li>动态展示图灵机的运行过程，直到它接受或拒绝字符串。</li></ul><p>3.<strong>输入字符串</strong>：你需要设计一个方法，让用户输入一个字符串，图灵机能够根据其定义进行识别。</p><h1 id="图灵机的基本结构"><a href="#图灵机的基本结构" class="headerlink" title="图灵机的基本结构"></a>图灵机的基本结构</h1><h2 id="1-基本常识要了解"><a href="#1-基本常识要了解" class="headerlink" title="1.基本常识要了解"></a>1.基本常识要了解</h2><ol><li><p>一个分格的<strong>无限长</strong>的纸带，每格可以容纳一个字符</p></li><li><p>一个<strong>读写头</strong>，可以在纸带上<strong>移动</strong>，<strong>读出</strong>当前格子的字符，<strong>重写</strong>格子上的内容，改变自己的内部状态。</p></li><li><p>一系列关于读写头动作的<strong>规则</strong>。（程序、状态、转移函数）</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/../images/%E5%9B%BE%E7%81%B5%E6%9C%BA%E7%9A%84%E7%BB%84%E6%88%90%E7%BB%93%E6%9E%84.png"></h2><p>4.输入、计算和输出</p></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">纸带上的内容（包括空白B）是计算前的输入和完成计算后的输出<br>计算从读写头的初始状态S0、初始位置和输入的纸带格局开始<br>按照规则进行读写头的移动、纸带字符的修改，直到进入停机状态（SH(停机状态)/SY(停机并接受)/SN(停机并拒绝)）<br>在停机状态时纸带的内容就是输出<br></code></pre></td></tr></table></figure><p>5.状态转移函数</p><p><img src="/../images/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E5%87%BD%E6%95%B0.png"></p><p>6.计算规则的限制</p><p><img src="/../images/%E8%AE%A1%E7%AE%97%E8%A7%84%E5%88%99%E7%9A%84%E9%99%90%E5%88%B6.png"></p><p>7.形式语言和图灵机</p><p><img src="/../images/%E5%BD%A2%E5%BC%8F%E8%AF%AD%E8%A8%80%E4%B8%8E%E5%9B%BE%E7%81%B5%E6%9C%BA.png"></p><h2 id="一个案例"><a href="#一个案例" class="headerlink" title="一个案例"></a>一个案例</h2><p><img src="/../images/%E6%A1%88%E4%BE%8B1.png"></p><p><img src="/../images/%E6%A1%88%E4%BE%8B2.png"></p><p><img src="/../images/%E6%A1%88%E4%BE%8B3.png"></p><img src="../images/为何重视图灵机.png" style="zoom:25%;" /><h1 id="Manim的使用"><a href="#Manim的使用" class="headerlink" title="Manim的使用"></a>Manim的使用</h1><p>![](..&#x2F;images&#x2F;manim1 .bmp)</p><p><img src="/../images/manim2.bmp"></p><h1 id="我是如何实现的"><a href="#我是如何实现的" class="headerlink" title="我是如何实现的"></a>我是如何实现的</h1><h2 id="1-根据题目要求定义好规则"><a href="#1-根据题目要求定义好规则" class="headerlink" title="1.根据题目要求定义好规则"></a>1.根据题目要求定义好规则</h2><p>首先，我们自己给出对于图灵机的定义（其中包含各个状态，以及状态转换规则），我们要实现的功能为判断一个数是否为回文数，初步定义：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">图灵机定义<br><span class="hljs-number">1</span>.输入符号集：假设字符串由字符<span class="hljs-selector-tag">a</span>和<span class="hljs-selector-tag">b</span>组成，即&#123;<span class="hljs-selector-tag">a</span>,<span class="hljs-selector-tag">b</span>&#125;<br><span class="hljs-number">2</span>.纸带符号集：包括<span class="hljs-selector-tag">a</span>、<span class="hljs-selector-tag">b</span>和特殊符号<span class="hljs-attribute">X</span>和<span class="hljs-attribute">Y</span>，以及空白字符_.(<span class="hljs-attribute">X</span>和<span class="hljs-attribute">Y</span>用于标记匹配过的字符。)<br><span class="hljs-number">3</span>.状态转移规则：<br></code></pre></td></tr></table></figure><p><img src="/../images/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E5%9B%BE.png"></p><h2 id="2-有了规则以后我们就可以去写manim来实现了"><a href="#2-有了规则以后我们就可以去写manim来实现了" class="headerlink" title="2.有了规则以后我们就可以去写manim来实现了"></a>2.有了规则以后我们就可以去写manim来实现了</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> manim <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PalindromeTuringMachine</span>(<span class="hljs-title class_ inherited__">Scene</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">construct</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 初始化纸带</span><br>        tape = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>]  <span class="hljs-comment"># 输入的纸带内容</span><br>        tape_display = <span class="hljs-variable language_">self</span>.create_tape(tape)<br>        <span class="hljs-variable language_">self</span>.add(tape_display)<br><br>        <span class="hljs-comment"># 初始化读写头位置</span><br>        head_index = <span class="hljs-number">0</span>  <span class="hljs-comment"># 初始读写头位置</span><br>        head_pointer = <span class="hljs-variable language_">self</span>.create_pointer(head_index, tape_display)<br>        <span class="hljs-variable language_">self</span>.add(head_pointer)<br><br>        <span class="hljs-comment"># 初始化状态显示</span><br>        state_text = Text(<span class="hljs-string">&quot;State: q_start&quot;</span>).scale(<span class="hljs-number">0.5</span>).to_corner(UP)<br>        <span class="hljs-variable language_">self</span>.add(state_text)<br><br>        <span class="hljs-comment"># 图灵机状态转移逻辑</span><br>        <span class="hljs-variable language_">self</span>.wait(<span class="hljs-number">2</span>)<br>        current_state = <span class="hljs-string">&quot;q_start&quot;</span><br>        <span class="hljs-keyword">while</span> current_state <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;q_accept&quot;</span>, <span class="hljs-string">&quot;q_reject&quot;</span>]:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;State: <span class="hljs-subst">&#123;current_state&#125;</span>, Head Index: <span class="hljs-subst">&#123;head_index&#125;</span>, Tape: <span class="hljs-subst">&#123;tape&#125;</span>&quot;</span>)<br>            current_char = tape[head_index]<br>            <span class="hljs-variable language_">self</span>.play(Indicate(tape_display[head_index]))  <span class="hljs-comment"># 突出显示当前字符</span><br><br>            <span class="hljs-comment"># 状态转移逻辑</span><br>            <span class="hljs-keyword">if</span> current_state == <span class="hljs-string">&quot;q_start&quot;</span>:<br>                <span class="hljs-keyword">if</span> current_char == <span class="hljs-string">&quot;a&quot;</span>:<br>                    tape[head_index] = <span class="hljs-string">&quot;X&quot;</span>  <span class="hljs-comment"># 更新逻辑纸带</span><br>                    <span class="hljs-comment"># 显示更新，确保逻辑和动画同步</span><br>                    <span class="hljs-variable language_">self</span>.play(Transform(tape_display[head_index][<span class="hljs-number">1</span>], Text(<span class="hljs-string">&quot;X&quot;</span>).scale(<span class="hljs-number">0.5</span>).move_to(tape_display[head_index][<span class="hljs-number">1</span>].get_center())))<br>                    current_state = <span class="hljs-string">&quot;q_find_right_a&quot;</span><br>                    head_index += <span class="hljs-number">1</span>  <span class="hljs-comment"># 更新指针位置</span><br>                    <span class="hljs-variable language_">self</span>.play(<span class="hljs-variable language_">self</span>.move_pointer(head_pointer, head_index, tape_display))<br>                <span class="hljs-keyword">elif</span> current_char == <span class="hljs-string">&quot;b&quot;</span>:<br>                    tape[head_index] = <span class="hljs-string">&quot;Y&quot;</span><br>                    <span class="hljs-variable language_">self</span>.play(Transform(tape_display[head_index][<span class="hljs-number">1</span>], Text(<span class="hljs-string">&quot;Y&quot;</span>).scale(<span class="hljs-number">0.5</span>).move_to(tape_display[head_index][<span class="hljs-number">1</span>].get_center())))<br>                    current_state = <span class="hljs-string">&quot;q_find_right_b&quot;</span><br>                    head_index += <span class="hljs-number">1</span><br>                    <span class="hljs-variable language_">self</span>.play(<span class="hljs-variable language_">self</span>.move_pointer(head_pointer, head_index, tape_display))<br>                <span class="hljs-keyword">elif</span> current_char <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;Y&quot;</span>]:<br>                    current_state = <span class="hljs-string">&quot;q_accept&quot;</span><br>                <span class="hljs-keyword">else</span>:<br>                    current_state = <span class="hljs-string">&quot;q_reject&quot;</span><br><br>            <span class="hljs-keyword">elif</span> current_state == <span class="hljs-string">&quot;q_find_right_a&quot;</span>:<br>                <span class="hljs-keyword">if</span> current_char <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;Y&quot;</span>]:<br>                    head_index += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">elif</span> current_char == <span class="hljs-string">&quot;_&quot;</span>:<br>                    current_state = <span class="hljs-string">&quot;q_mark_left_a&quot;</span><br>                    head_index -= <span class="hljs-number">1</span><br><br>            <span class="hljs-keyword">elif</span> current_state == <span class="hljs-string">&quot;q_mark_left_a&quot;</span>:<br>                <span class="hljs-keyword">if</span> current_char <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;Y&quot;</span>] :<br>                    <span class="hljs-keyword">if</span> head_index == <span class="hljs-number">0</span>:<br>                        current_state = <span class="hljs-string">&quot;q_accept&quot;</span><br>                    <span class="hljs-keyword">else</span>:<br>                        head_index -= <span class="hljs-number">1</span><br>                <span class="hljs-keyword">elif</span> current_char == <span class="hljs-string">&quot;a&quot;</span>:<br>                    tape[head_index] = <span class="hljs-string">&quot;X&quot;</span><br>                    <span class="hljs-variable language_">self</span>.play(<br>                        Transform(tape_display[head_index][<span class="hljs-number">1</span>], Text(<span class="hljs-string">&quot;X&quot;</span>).scale(<span class="hljs-number">0.5</span>).move_to(tape_display[head_index][<span class="hljs-number">1</span>].get_center()))<br>                    )<br>                    current_state = <span class="hljs-string">&quot;q_check_middle&quot;</span><br>                    head_index -= <span class="hljs-number">1</span><br>                    <span class="hljs-variable language_">self</span>.play(<span class="hljs-variable language_">self</span>.move_pointer(head_pointer, head_index, tape_display))<br>                <span class="hljs-keyword">else</span>:<br>                    current_state = <span class="hljs-string">&quot;q_reject&quot;</span><br><br>            <span class="hljs-keyword">elif</span> current_state == <span class="hljs-string">&quot;q_find_right_b&quot;</span>:<br>                <span class="hljs-keyword">if</span> current_char <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;Y&quot;</span>]:<br>                    head_index += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">elif</span> current_char == <span class="hljs-string">&quot;_&quot;</span>:<br>                    current_state = <span class="hljs-string">&quot;q_mark_left_b&quot;</span><br>                    head_index -= <span class="hljs-number">1</span><br><br>            <span class="hljs-keyword">elif</span> current_state == <span class="hljs-string">&quot;q_mark_left_b&quot;</span>:<br>                <span class="hljs-keyword">if</span> current_char <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;Y&quot;</span>]:<br>                    <span class="hljs-keyword">if</span> head_index == <span class="hljs-number">0</span>:<br>                        current_state = <span class="hljs-string">&quot;q_accept&quot;</span><br>                    head_index -= <span class="hljs-number">1</span><br>                <span class="hljs-keyword">elif</span> current_char == <span class="hljs-string">&quot;b&quot;</span>:<br>                    tape[head_index] = <span class="hljs-string">&quot;Y&quot;</span><br>                    <span class="hljs-variable language_">self</span>.play(<br>                        Transform(tape_display[head_index][<span class="hljs-number">1</span>], Text(<span class="hljs-string">&quot;Y&quot;</span>).scale(<span class="hljs-number">0.5</span>).move_to(tape_display[head_index][<span class="hljs-number">1</span>].get_center()))<br>                    )<br>                    current_state = <span class="hljs-string">&quot;q_check_middle&quot;</span><br>                    head_index -= <span class="hljs-number">1</span><br>                    <span class="hljs-variable language_">self</span>.play(<span class="hljs-variable language_">self</span>.move_pointer(head_pointer, head_index, tape_display))<br>                <span class="hljs-keyword">else</span>:<br>                    current_state = <span class="hljs-string">&quot;q_reject&quot;</span><br><br>            <span class="hljs-keyword">elif</span> current_state == <span class="hljs-string">&quot;q_check_middle&quot;</span>:<br>                <span class="hljs-keyword">if</span> current_char <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;Y&quot;</span>]:<br>                    head_index += <span class="hljs-number">1</span><br>                    current_state = <span class="hljs-string">&quot;q_start&quot;</span><br>                <span class="hljs-keyword">elif</span> current_char <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>]:<br>                    current_state = <span class="hljs-string">&quot;q_check_middle&quot;</span><br>                    head_index -= <span class="hljs-number">1</span><br>                <span class="hljs-keyword">elif</span> current_char == <span class="hljs-string">&quot;_&quot;</span>:<br>                    current_state = <span class="hljs-string">&quot;q_accept&quot;</span><br><br>            <span class="hljs-comment"># 更新状态显示和读写头位置</span><br>            <span class="hljs-variable language_">self</span>.play(state_text.animate.become(Text(<span class="hljs-string">f&quot;State: <span class="hljs-subst">&#123;current_state&#125;</span>&quot;</span>).scale(<span class="hljs-number">0.5</span>).to_corner(UP)))<br>            <span class="hljs-variable language_">self</span>.play(<span class="hljs-variable language_">self</span>.move_pointer(head_pointer, head_index, tape_display))<br><br>        <span class="hljs-comment"># 显示最终状态</span><br>        <span class="hljs-keyword">if</span> current_state == <span class="hljs-string">&quot;q_accept&quot;</span>:<br>            final_text = Text(<span class="hljs-string">&quot;Result: Palindrome&quot;</span>).scale(<span class="hljs-number">0.7</span>).to_edge(DOWN)<br>        <span class="hljs-keyword">else</span>:<br>            final_text = Text(<span class="hljs-string">&quot;Result: Not a Palindrome&quot;</span>).scale(<span class="hljs-number">0.7</span>).to_edge(DOWN)<br>        <span class="hljs-variable language_">self</span>.play(FadeIn(final_text))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_tape</span>(<span class="hljs-params">self, tape</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Create a tape display.&quot;&quot;&quot;</span><br>        tape_mobjects = VGroup()<br>        <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> tape:<br>            square = Square().set_fill(BLUE, opacity=<span class="hljs-number">0.5</span>).set_stroke(BLACK, width=<span class="hljs-number">2</span>)<br>            text = Text(char).scale(<span class="hljs-number">0.5</span>).move_to(square.get_center())<br>            cell = VGroup(square, text)<br>            tape_mobjects.add(cell)<br>        tape_mobjects.arrange(RIGHT, buff=<span class="hljs-number">0.1</span>)<br>        <span class="hljs-keyword">return</span> tape_mobjects<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_pointer</span>(<span class="hljs-params">self, index, tape_display</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Create a pointer for the current head position.&quot;&quot;&quot;</span><br>        pointer = Arrow(UP, DOWN).next_to(tape_display[index], UP)<br>        <span class="hljs-keyword">return</span> pointer<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">move_pointer</span>(<span class="hljs-params">self, pointer, index, tape_display</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Move the pointer to a new index.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> pointer.animate.next_to(tape_display[index], UP)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
